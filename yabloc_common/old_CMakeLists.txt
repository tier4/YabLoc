cmake_minimum_required(VERSION 3.5)
project(yabloc_common)

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic -Werror)
endif()

# ===================================================
find_package(ament_cmake_auto REQUIRED)
ament_auto_find_build_dependencies()

# ===================================================
# Eigen3
find_package(Eigen3 REQUIRED)

# OpenCV
find_package(OpenCV REQUIRED)

# PCL
find_package(PCL REQUIRED)

# Sophus
find_package(Sophus REQUIRED)

# https://github.com/strasdat/Sophus/issues/388
# Sophus's macro cause compile error for the "-Wpedantic" flag, so make sure to import as a system.
# We must always call the following command after "ament_auto_find_build_dependencies()" because it rewrite CMAKE_NO_SYSTEM_FROM_IMPORTED to TRUE.
set(CMAKE_NO_SYSTEM_FROM_IMPORTED FALSE)

# glog
find_package(glog REQUIRED)

# ===================================================
# GeographicLib
find_package(PkgConfig)
find_path(GeographicLib_INCLUDE_DIR GeographicLib/Config.h
  PATH_SUFFIXES GeographicLib
)
set(GeographicLib_INCLUDE_DIRS ${GeographicLib_INCLUDE_DIR})
find_library(GeographicLib_LIBRARIES NAMES Geographic)

# ===================================================
# Libraries
file(GLOB REGULATORY_ELEMENT_SOURCE 3rd/regulatory_elements/lib/*cpp)
ament_auto_add_library(ll2_util SHARED
  ${REGULATORY_ELEMENT_SOURCE})
target_include_directories(ll2_util PUBLIC include 3rd/regulatory_elements/include)

set(TARGET ${PROJECT_NAME}_lib)
ament_auto_add_library(${TARGET} SHARED
  src/ublox_stamp.cpp
  src/pub_sub.cpp
  src/fix2mgrs.cpp
  src/camera_info_subscriber.cpp
  src/cv_decompress.cpp
  src/pose_conversions.cpp
  src/static_tf_subscriber.cpp
  src/extract_line_segments.cpp
  src/from_bin_msg.cpp
  src/transform_line_segments.cpp
  src/color.cpp)
target_include_directories(
  ${TARGET} PUBLIC include
)
target_include_directories(
  ${TARGET} PRIVATE
  SYSTEM
  ${PCL_INCLUDE_DIRS}
  ${GeographicLib_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)
target_link_libraries(${TARGET} Geographic ${PCL_LIBRARIES} Sophus::Sophus ll2_util)

# ===================================================
# Clear ${PYTHON_EXECUTABLE} defined by mrt_cmake_module
unset(PYTHON_EXECUTABLE)
message(STATUS "PYTHON_EXECUTABLE: ${PYTHON_EXECUTABLE}")

# ===================================================
# Message & Service
rosidl_generate_interfaces(${PROJECT_NAME}
  "srv/Ground.srv"
  DEPENDENCIES
  std_msgs
  geometry_msgs
)

# # ===================================================
# # Executables
# # ground_server
# set(TARGET ground_server_node)
# ament_auto_add_executable(${TARGET}
# src/ground_server/ground_server_core.cpp
# src/ground_server/ground_server_node.cpp
# src/ground_server/polygon_operation.cpp)
# target_include_directories(${TARGET} PUBLIC include)
# target_include_directories(${TARGET} SYSTEM PRIVATE ${EIGEN3_INCLUDE_DIRS} ${PCL_INCLUDE_DIRS})
# target_link_libraries(${TARGET} ${PCL_LIBRARIES} Sophus::Sophus glog::glog)
# rosidl_target_interfaces(${TARGET} yabloc_common_srv "rosidl_typesupport_cpp")

# # ll2_decomposer
# set(TARGET ll2_decomposer_node)
# ament_auto_add_executable(${TARGET}
# src/ll2_decomposer/ll2_decomposer_core.cpp
# src/ll2_decomposer/ll2_decomposer_node.cpp)
# target_include_directories(${TARGET} PUBLIC include)
# target_include_directories(${TARGET} SYSTEM PRIVATE ${EIGEN3_INCLUDE_DIRS} ${PCL_INCLUDE_DIRS})
# target_link_libraries(${TARGET} ${PCL_LIBRARIES})
# rosidl_target_interfaces(${TARGET} yabloc_common_srv "rosidl_typesupport_cpp")

# # ===================================================
# ament_export_dependencies(PCL Sophus)

# ===================================================  ament_auto_packages does not proper in this package
message(STATUS "debug ${${PROJECT_NAME}_LIBRARIES}")

# ament_auto_package(INSTALL_TO_SHARE config)
macro(original_ament_auto_package)
  cmake_parse_arguments(_ARG "INSTALL_TO_PATH" "" "INSTALL_TO_SHARE" ${ARGN})

  # passing all unparsed arguments to ament_package()

  # export all found build dependencies which are also run dependencies
  set(_run_depends
    ${${PROJECT_NAME}_BUILD_EXPORT_DEPENDS}
    ${${PROJECT_NAME}_BUILDTOOL_EXPORT_DEPENDS}
    ${${PROJECT_NAME}_EXEC_DEPENDS})

  foreach(_dep
    ${${PROJECT_NAME}_FOUND_BUILD_DEPENDS}
    ${${PROJECT_NAME}_FOUND_BUILDTOOL_DEPENDS})
    if(_dep IN_LIST _run_depends)
      ament_export_dependencies("${_dep}")
    endif()
  endforeach()

  # export and install include directory of this package if it has one
  if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/include")
    ament_export_include_directories("include/${PROJECT_NAME}")
    install(DIRECTORY include/ DESTINATION include/${PROJECT_NAME})
  endif()

  # export and install all libraries
  if(NOT ${PROJECT_NAME}_LIBRARIES STREQUAL "")
    set(without_interfaces "")

    foreach(library_name ${${PROJECT_NAME}_LIBRARIES})
      get_target_property(library_type ${library_name} TYPE)

      if(NOT "${library_type}" STREQUAL "INTERFACE_LIBRARY")
        list(APPEND without_interfaces ${library_name})
      endif()
    endforeach()

    # ament_export_libraries(${without_interfaces})
    install(
      TARGETS ${without_interfaces}
      ARCHIVE DESTINATION lib
      LIBRARY DESTINATION lib
      RUNTIME DESTINATION bin
    )
  endif()

  ament_export_libraries(${PROJECT_NAME}_lib)
  ament_export_targets(${PROJECT_NAME}_lib)
  message(STATUS "debug: unused: ${_ARG_UNPARSED_ARGUMENTS}")

  # # install all executables
  # if(NOT ${PROJECT_NAME}_EXECUTABLES STREQUAL "")
  # if(_ARG_INSTALL_TO_PATH)
  # set(_destination "bin")
  # else()
  # set(_destination "lib/${PROJECT_NAME}")
  # endif()

  # install(
  # TARGETS ${${PROJECT_NAME}_EXECUTABLES}
  # DESTINATION ${_destination}
  # )
  # endif()

  # # install directories to share
  # foreach(_dir ${_ARG_INSTALL_TO_SHARE})
  # install(
  # DIRECTORY "${_dir}"
  # DESTINATION "share/${PROJECT_NAME}"
  # )
  # endforeach()

  # ament_execute_extensions(ament_auto_package)
  # ament_package(${_ARG_UNPARSED_ARGUMENTS})
  ament_package()
endmacro()

original_ament_auto_package(INSTALL_TO_SHARE config)
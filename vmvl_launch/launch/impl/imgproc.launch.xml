<launch>
    <arg name="use_sim_time" default="true"/>
    <arg name="log_level" default="warn"/>

    <arg name="use_sensor_qos" default="true"/>
    <arg name="src_image" default="/sensing/camera/traffic_light/image_raw/compressed"/>
    <arg name="src_info" default="/sensing/camera/traffic_light/camera_info"/>
    <arg name="resized_image" default="/sensing/camera/undistorted/image_raw"/>
    <arg name="resized_info" default="/sensing/camera/undistorted/camera_info"/>

    <arg name="min_segment_length" default="-1.0"/>
    <arg name="max_segment_distance" default="-1.0"/>
    <arg name="max_lateral_distance" default="-1.0"/>

    <arg name="truncate_pixel_threshold" default="-1" description="For robustness verification, if positive value is given, line segments are truncated."/>


    <!-- undistort & resize -->
    <arg name="override_extrinsic" default="false" description="Value for overriding the camera's frame_id. Use when another static_tf is to be read."/>

    <group if="$(var override_extrinsic)"> 
        <node name="undistort" pkg="vmvl_imgproc" exec="undistort_node" output="screen" args="--ros-args --log-level $(var log_level)">
            <param name="use_sim_time" value="$(var use_sim_time)"/>
            <param name="width" value="800"/>
            <param name="override_frame_id" value="override_camera_frame"/>
            <param name="use_sensor_qos" value="$(var use_sensor_qos)"/>
        </node>
        <node name="override_static_tf" pkg="tf2_ros" exec="static_transform_publisher" args="--x 0.431  --y -0.040  --z -0.135 --roll -1.571 --pitch 0.007 --yaw -1.544 --frame-id sensor_kit_base_link --child-frame-id override_camera_frame"/>
    </group>
    <group unless="$(var override_extrinsic)"> 
        <node name="undistort" pkg="vmvl_imgproc" exec="undistort_node" output="screen" args="--ros-args --log-level $(var log_level)">
            <param name="use_sim_time" value="$(var use_sim_time)"/>
            <param name="width" value="800"/>
            <param name="override_frame_id" value=""/>
            <param name="use_sensor_qos" value="$(var use_sensor_qos)"/>
        </node>
    </group>


    <!-- line segment detector -->
    <arg name="output_lsd_image" default="lsd_image"/>
    <arg name="output_lsd_cloud" default="lsd_cloud"/>

    <node name="lsd" pkg="vmvl_imgproc" exec="lsd_node" output="screen" args="--ros-args --log-level $(var log_level)">
        <param name="use_sim_time" value="$(var use_sim_time)"/>
        <remap from="$(var src_image)" to="$(var resized_image)"/>
        <remap from="$(var src_info)" to="$(var resized_info)"/>

        <remap from="lsd_image" to="$(var output_lsd_image)"/>
        <remap from="lsd_cloud" to="$(var output_lsd_cloud)"/>
    </node>

    <!-- graph based segmentation -->
    <arg name="output_graph_segmented" default="graph_segmented"/>
    <arg name="output_segmented_image" default="segmented_image"/>
    <node name="graph_segment" pkg="vmvl_imgproc" exec="graph_segment_node" output="screen" args="--ros-args --log-level info">
        <remap from="$(var src_image)" to="$(var resized_image)"/>
        <remap from="$(var src_info)" to="$(var resized_info)"/>
        <remap from="graph_segmented" to="$(var output_graph_segmented)"/>
        <remap from="segmented_image" to="$(var output_segmented_image)"/>
    </node>

    <!-- segment fitler -->
    <arg name="input_graph_segmented" default="graph_segmented"/>
    <arg name="input_lsd_cloud" default="lsd_cloud"/>
    <arg name="output_projected_lsd_cloud" default="projected_lsd_cloud"/>
    <arg name="output_projected_image" default="projected_image"/>
    <node name="segment_filter" pkg="vmvl_imgproc" exec="segment_filter_node" output="screen" args="--ros-args --log-level info">
        <param name="truncate_pixel_threshold" value="$(var truncate_pixel_threshold)" />
        <param name="min_segment_length" value="$(var min_segment_length)"/>
        <param name="max_segment_distance" value="$(var max_segment_distance)"/>
        <param name="max_lateral_distance" value="$(var max_lateral_distance)"/>

        <remap from="camera_info" to="$(var resized_info)"/>
        <remap from="graph_segmented" to="$(var input_graph_segmented)"/>
        <remap from="lsd_cloud" to="$(var input_lsd_cloud)"/>
        <remap from="projected_lsd_cloud" to="$(var output_projected_lsd_cloud)"/>
        <remap from="projected_image" to="$(var output_projected_image)"/>
    </node>

</launch>